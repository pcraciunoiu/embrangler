<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Disembrangling Programming</title>
 <link href="http://embrangler.com/tag/migration/atom.xml" rel="self"/>
 <link href="http://embrangler.com/tag/migration"/>
 <updated>2011-02-12T23:01:32-08:00</updated>
 <id>http://embrangler.com/</id>
 <author>
   <name>Paul Craciunoiu</name>
   <email>paul@craciunoiu.net</email>
 </author>

 
 <entry>
   <title>SUMO and migrating large amounts of data</title>
   <link href="http://embrangler.com/2010/12/migrating-large-amounts-of-data"/>
   <updated>2010-12-03T00:00:00-08:00</updated>
   <id>http://embrangler.com/2010/12/migrating-large-amounts-of-data</id>
   <content type="html">&lt;p&gt;Data migration is a complicated problem. It&amp;#8217;s one of those things nobody wants to do, because it&amp;#8217;s mostly tedious, not engaging, and also important to get right. Often times you have to compromise. I&amp;#8217;ll talk a bit about the history of SUMO&amp;#8217;s data, decisions the product and development team have made regarding its migration, and things I&amp;#8217;ve learned from the experience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='#quick_tips'&gt;Quick tips&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='#background'&gt;Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='#rewriting_where_to_start'&gt;Data influences which components are rewritten first&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='#too_much_data'&gt;Too much data! What now?&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='#migrating_questions'&gt;Lesson 1: Migrating questions&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='#migrating_the_knowledge-base'&gt;Lesson 2: Migrating the knowledge base&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='#can_i_get_away_with_pure_sql'&gt;Can I get away with pure SQL?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='#converting_data'&gt;Converting data: some challenges&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='#data_integrity_and_storage'&gt;Lesson 3: Data integrity and storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='quick_tips'&gt;Quick tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Start with the smallest dataset first to get the hang of things. (&lt;a href='#rewriting_where_to_start'&gt;details&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;You&amp;#8217;ll have to deal with lots of edge cases. Make sure to write tests. (&lt;a href='#testing'&gt;details&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;Careful when converting dates/times: timezones can be a pain, and data is often stored in the timezone of the server. (&lt;a href='#converting_data'&gt;details&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;When you have so much data that migrating it would take days: do you need &lt;em&gt;all&lt;/em&gt; of it? (&lt;a href='#too_much_data'&gt;details&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;Consider the benefits of migrating data offline (&lt;a href='#migrating_the_knowledge_base'&gt;details&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;It&amp;#8217;s unlikely that you&amp;#8217;ll be able to use raw SQL. (&lt;a href='#can_i_get_away_with_pure_sql'&gt;details&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;You&amp;#8217;ll learn how important data integrity is, so you&amp;#8217;ll pay attention at the schema your software uses next time. (&lt;a href='#data_integrity_and_storage'&gt;details&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='background'&gt;Background&lt;/h2&gt;

&lt;p&gt;At the beginning of February, &lt;a href='http://support.mozilla.com'&gt;SUMO&lt;/a&gt; started on a new adventure: rewriting the entire platform from an outdated version of &lt;a href='http://tikiwiki.org/'&gt;TikiWiki&lt;/a&gt; to &lt;a href='http://www.djangoproject.com/'&gt;Django&lt;/a&gt;. As different (more or less stand-alone) pieces of the application were moved over to the new platform, our data had to be migrated over as well.&lt;/p&gt;

&lt;p&gt;Over the course of the past 6 months, I&amp;#8217;ve migrated over 25,000 pieces of content, most of which contained large amounts of text data.&lt;/p&gt;

&lt;h2 id='rewriting_where_to_start'&gt;Rewriting: where to start?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tip: Start with the smallest, simplest dataset first.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first migration of data was part of our new &lt;a href='http://support.mozilla.com/en-US/forums'&gt;discussion forums&lt;/a&gt;. This was by far the smallest component we had to migrate over:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the forums contained roughly 5000 posts, in just about 1000 threads.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;by comparison, we had a total of ~450,000 answers for ~260,000 questions, and over 5,000 knowledge base pages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://support.mozilla.com/en-US/questions'&gt;questions&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://support.mozilla.com/en-US/kb/Using%20Firefox'&gt;knowledge base, document example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;I had never done migrations before, so starting small was a good idea.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;In addition to being the smallest, the forums content was also more straightforward to migrate (see also &lt;a href='#converting_data'&gt;Converting data&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='too_much_data'&gt;Too much data!!&lt;/h2&gt;

&lt;p&gt;Our questions component had over 450,000 (!) answers in the old system. Should you ever be in this situation, here are some options worth considering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;do you need all this data? can you keep just a reasonable portion of it?&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;if you don&amp;#8217;t, great! (&lt;a href='#migrating_questions'&gt;details&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;if you &lt;strong&gt;do&lt;/strong&gt;, tough luck. Consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;migrating data offline and then running a straighforward SQL import on the production database. (&lt;a href='#migrating_the_knowledge_base'&gt;details&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;running the conversion script in chunks: migrate a part of the data now, and more later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='migrating_questions'&gt;Migrating questions&lt;/h3&gt;

&lt;p&gt;Fortunately, even though we had over 260,000 questions to migrate, only about 15,000 were recent enough to be relevant for the currently supported versions of &lt;a href='http://getfirefox.com'&gt;Firefox&lt;/a&gt;. Hence, the development and product teams agreed to &lt;em&gt;not&lt;/em&gt; migrate all of them.&lt;/p&gt;

&lt;p&gt;The script to convert data over was run live on the production server, and took over one hour to finish - not too bad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caveat:&lt;/strong&gt; frozen edits to and creation of TikiWiki questions for those a bit over an hour.&lt;/p&gt;

&lt;h3 id='migrating_the_knowledge_base'&gt;Migrating the Knowledge Base&lt;/h3&gt;

&lt;p&gt;The Knowledge base presented a different situation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Between 5,000 and 6,000 articles, some with long-standing history&lt;/li&gt;

&lt;li&gt;Approved and unreviewed versions of an article were stored as separate articles in TikiWiki (each with its own history)&lt;/li&gt;

&lt;li&gt;Lots and lots of content and metadata &lt;em&gt;per document&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;Changing our wiki syntax from &lt;a href='http://tiki.org/tiki-index.php?page=WikiSyntax'&gt;TikiWiki&lt;/a&gt; to &lt;a href='http://www.mediawiki.org/wiki/Help:Formatting'&gt;MediaWiki&lt;/a&gt; (used by &lt;a href='http://www.wikipedia.org/'&gt;Wikipedia&lt;/a&gt;, among many others).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, even though the &lt;em&gt;count&lt;/em&gt; was much lower than for forums or questions, migrating these was much more intensive, both CPU and IO-wise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our solution&lt;/strong&gt; here was to run the script offline (a.k.a. I ran the script on my machine) and hand our IT team just the SQL output to import.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt; The script was complex enough to take &lt;em&gt;over 3 hours&lt;/em&gt; from start to finish. Unreasonable to run on our production servers: if something went wrong, it could take an entire workday (or more) for the IT and development team to get things back on track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caveat:&lt;/strong&gt; frozen edits to and creation of TikiWiki knowledge base articles for a day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Huge benefits:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the data migration took less than &lt;strong&gt;5 minutes&lt;/strong&gt; to import on the production database.&lt;/li&gt;

&lt;li&gt;no worrying about a script crashing on untested data&lt;/li&gt;

&lt;li&gt;no overloading the production servers with database queries (replication lag can be an issue)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='can_i_get_away_with_pure_sql'&gt;Can I get away with pure SQL?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rarely.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data &lt;strong&gt;changes frequently&lt;/strong&gt; over time.&lt;/li&gt;

&lt;li&gt;Thus, you want to freeze changes for the &lt;strong&gt;minimum possible time&lt;/strong&gt;, so running a script on the production database is the way to go.&lt;/li&gt;

&lt;li&gt;Hence, unless the new schema structure is close enough for raw SQL to handle, you&amp;#8217;re out of luck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only time we were able to use pure SQL was when &lt;a href='#migrating_the_knowledge-base'&gt;we froze edits for a day&lt;/a&gt; and generated the SQL offline.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How similar does schema structure have to be for SQL to work?&lt;/strong&gt; you ask.&lt;/p&gt;

&lt;p&gt;Here is the story for our &lt;a href='http://support.mozilla.com/en-US/forums'&gt;forums&lt;/a&gt;, the &lt;strong&gt;simplest schema:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we kept the general structure of the data: forum with threads as children, and threads with posts as children.&lt;/li&gt;

&lt;li&gt;in TikiWiki, our threads and posts were stored in the same table, with a parentId column distinguishing which are threads and which are posts.&lt;/li&gt;

&lt;li&gt;in Django, threads had their own table (a good &lt;a href='http://en.wikipedia.org/wiki/Database_normalization'&gt;normalization&lt;/a&gt; to have).&lt;/li&gt;

&lt;li&gt;a thread from TikiWiki mapped to a thread + a post in Django&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of those (and other) differences, we couldn&amp;#8217;t run a SQL-only import as reliably as a python/PHP conversion script. You could try doing a SQL-only import, but you&amp;#8217;re gonna hit some &lt;strong&gt;key issues you wish SQL could solve:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;while + if/else if/else structures. Much too often, data is corrupted or columns contain unexpected values - &lt;a href='http://dev.mysql.com/doc/refman/5.0/en/control-flow-functions.html#function_if'&gt;MySQL&amp;#8217;s conditional construct&lt;/a&gt; doesn&amp;#8217;t do much.&lt;/li&gt;

&lt;li&gt;colliding unique keys, or integrity errors due to foreign key references are &lt;em&gt;very&lt;/em&gt; difficult to prevent against in SQL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='converting_data'&gt;Converting data&lt;/h2&gt;

&lt;p&gt;Here are some general observations of problems you might run into when converting data, based on our problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Frequently, &lt;strong&gt;normalization&lt;/strong&gt;/denormalization changes are &lt;strong&gt;worth the effort&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More often than not, normalization is the way to go.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Long-term benefits are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data integrity a &lt;a href='#data_integrity_and_storage'&gt;&lt;strong&gt;&lt;em&gt;huge issue&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;Usually, more flexibility to add functionality later on.&lt;/li&gt;

&lt;li&gt;Easier migration (should you need to do it again).&lt;/li&gt;

&lt;li&gt;&lt;a href='http://lmgtfy.com/?q=benefits+of+normalization'&gt;And more!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Syntax changes&lt;/strong&gt; are &lt;strong&gt;the worst&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have to change wiki syntax, consider going straight to HTML: this way, you can use the rendered output of the documents from the old platform.&lt;/li&gt;

&lt;li&gt;Can&amp;#8217;t get away with just HTML? Try regex conversion! I&amp;#8217;m not saying that using a proper parser is a bad idea &amp;#8211; but if you have to &lt;strong&gt;write a parser&lt;/strong&gt;, it&amp;#8217;s probably not worth the effort.&lt;/li&gt;

&lt;li&gt;Consider a &lt;a href='http://en.wikipedia.org/wiki/Pushdown_automaton'&gt;simple PDA&lt;/a&gt; instead of a parser, it might just work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Dates and times are &lt;strong&gt;timezone-sensitive&lt;/strong&gt;. When converting, make sure to test that you&amp;#8217;re taking timezones into account.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In our case, we were moving over from a basically timezone-ignorant platform (as many PHP applications are), to a timezone-sensitive application (Django).&lt;/li&gt;

&lt;li&gt;Some columns were integers (&lt;a href='http://en.wikipedia.org/wiki/Unix_time'&gt;UNIX timestamps&lt;/a&gt;), which are universally based on UTC, and so less tricky to convert. MySQL&amp;#8217;s &lt;a href='http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function_from-unixtime'&gt;FROM_UNIXTIME&lt;/a&gt; can be useful here.&lt;/li&gt;

&lt;li&gt;Others were mysql dates/datetimes/timestamps, recorded at the server&amp;#8217;s timezone (for us, US/Pacific, or PDT).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Be prepared for &lt;strong&gt;lots and lots of edge cases:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax changes are a nightmare of edge cases, as the old syntax probably has different rules and a different parser than the new one. One common problem for us was whitespace handling.&lt;/li&gt;

&lt;li&gt;If foreign keys were not (well) enforced in the old system, there will be numerous exceptions to catch in the new one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='data_integrity_and_storage'&gt;Data integrity and storage&lt;/h3&gt;

&lt;p&gt;One of the most valuable lessons to learn from migrating data is &lt;a href='http://en.wikipedia.org/wiki/Data_integrity'&gt;integrity&lt;/a&gt;. Another one is storing data properly encoded and consistently. I&amp;#8217;ll highlight just a few things that help with respect to data migration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use foreign keys and any other constraints as much as technically accurate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E.g. you will have fewer exceptions to handle if you can rely on foreign keys to refer to valid rows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Storing text in one encoding is better than multiple; preferably unicode.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Store dates and times in the same timezone; preferably UTC.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Use a database that &lt;a href='http://coffeeonthekeyboard.com/django-fixtures-with-circular-foreign-keys-480/'&gt;supports deferred foreign key checks&lt;/a&gt;, and is generally better about &lt;a href='http://en.wikipedia.org/wiki/ACID'&gt;ACID&lt;/a&gt;. That&amp;#8217;s not MySQL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='testing'&gt;Testing&lt;/h2&gt;

&lt;p&gt;Although testing some temporary code that you&amp;#8217;ll use once may seem like a waste, if you&amp;#8217;re dealing with large amounts of data that can change, you will be better off writing tests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cover the basics - migrating a typical piece of content.&lt;/li&gt;

&lt;li&gt;Cover some, if not all of the edge cases.&lt;/li&gt;

&lt;li&gt;(somewhat related to testing) Write some helper scripts (e.g. bash) to make it easy to run the migration and spot check.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I worked on migrating the Knowledge Base over several weeks, and sometimes changes I made to the script broke tests &amp;#8211; if it wasn&amp;#8217;t for those tests, lots of content could have been migrated poorly, or not at all.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Embrangler: Moving to Jekyll</title>
   <link href="http://embrangler.com/2010/03/embrangler-moving-to-jekyll"/>
   <updated>2010-03-21T00:00:00-07:00</updated>
   <id>http://embrangler.com/2010/03/embrangler-moving-to-jekyll</id>
   <content type="html">&lt;p&gt;It took only three days to migrate my blog from &lt;a href='http://wordpress.org'&gt;Wordpress&lt;/a&gt; to &lt;a href='http://wiki.github.com/mojombo/jekyll/'&gt;Jekyll&lt;/a&gt;. For anyone who plans to do this, I&amp;#8217;m summarizing the whole process below.&lt;/p&gt;

&lt;p&gt;Table of contents:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='#why_change'&gt;Why change?&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='#why_jekyll'&gt;Why Jekyll?&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='#migration_process'&gt;Migration process&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='#conclusion'&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='why_change'&gt;Why change?&lt;/h2&gt;

&lt;p&gt;While I realize Wordpress the most popular blogging platform for a reason, I was bothered by the workflow involved with having a WP blog. Some of the (arguable) inconveniences I found were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the WYSIWYG editor doesn&amp;#8217;t handle some of the markup I would like (headings, tables aren&amp;#8217;t great either), so I would constantly switch between the Visual and HTML tabs to format things the way I wanted to. While I realize this could be fixed by customizing the editor, why should I have to do that? Plus, I have long given up hope of the ideal WYSIWYG editor. Besides not handling markup very well, it would sometimes reformat some of my plain HTML and break it.&lt;/li&gt;

&lt;li&gt;creating posts is pretty much the only thing I do. I don&amp;#8217;t use categories, tags, or any other features. Yet I had this admin area cluttered with features.&lt;/li&gt;

&lt;li&gt;I&amp;#8217;m not too fond of WP&amp;#8217;s version control. I would often see the message that &amp;#8220;a more recent version of this post is available&amp;#8221; erroneously, I&amp;#8217;m still not sure why. While changing versions worked well enough, I find the idea of an actual version control system more appealing.&lt;/li&gt;

&lt;li&gt;My blog could use a redesign. For a while, I was using the &lt;a href='http://wordpress.org/extend/themes/carrington-text'&gt;Carrington Text&lt;/a&gt; theme, which was ok but not great. I wanted to make it feel more like &lt;em&gt;my&lt;/em&gt; blog &amp;#8211; no sidebar, larger font, a better home page to name a few.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='why_jekyll'&gt;Why Jekyll?&lt;/h2&gt;

&lt;p&gt;A few weeks before I decided to switch off of Wordpress, I found out about static site-generator engines alternatives that would use available version control software such as git or svn. After looking around I hesitated to switch to any of these because they were mostly Ruby-based, and I was unfamliar with how they work. However, all other alternatives seem to be heading towards full-fledged &lt;abbr title='Content Management System'&gt;CMS&lt;/abbr&gt;&amp;#8217;s.&lt;/p&gt;

&lt;p&gt;A quick note on static sites: they have virtually no security holes (well, in theory), because there is no server-side handling of data submission. I&amp;#8217;m using a &lt;abbr title='Virtual Private Server'&gt;VPS&lt;/abbr&gt; too, so I was fond of having less CPU usage on the server (due to not having to process, say, PHP scripts for Wordpress).&lt;/p&gt;

&lt;p&gt;Some of the alternatives to Jekyll that I considered are &lt;a href='http://www.cloudhead.io/toto'&gt;Toto&lt;/a&gt;, &lt;a href='http://www.staceyapp.com/'&gt;StaceyApp&lt;/a&gt;, &lt;a href='http://chyrp.net/'&gt;Chyrp&lt;/a&gt;, &lt;a href='http://subtextproject.com/'&gt;Subtext&lt;/a&gt; and &lt;a href='http://typosphere.org/'&gt;Typo&lt;/a&gt;. I picked &lt;a href='http://wiki.github.com/mojombo/jekyll/'&gt;Jekyll&lt;/a&gt; for two main reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;popularity &amp;#8211; looking at the &lt;a href='http://wiki.github.com/mojombo/jekyll/'&gt;project&amp;#8217;s github&lt;/a&gt; watches/forks&lt;/li&gt;

&lt;li&gt;documentation and examples &amp;#8211; there is actually a &lt;a href='http://wiki.github.com/mojombo/jekyll/sites'&gt;Sites&lt;/a&gt; page, leading to other sites and their github hosted sources, immensely helpful when starting out&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='migration_process'&gt;Migration process&lt;/h2&gt;

&lt;p&gt;I followed these instructions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://wiki.github.com/mojombo/jekyll/install'&gt;Installation steps from the Jekyll documentation&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://blog.favrik.com/2009/03/02/installing-jekyll-on-ubuntu-8-10/'&gt;Installing Jekyll on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;#8230; and started by looking at &lt;a href='http://tom.preston-werner.com/'&gt;Tom Preston-Werner&amp;#8217;s blog&lt;/a&gt; and its &lt;a href='http://github.com/mojombo/mojombo.github.com'&gt;source on github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='migrating_posts'&gt;Migrating posts&lt;/h3&gt;

&lt;p&gt;After I got the redesign to look good on Jekyll, the next step was migrating my Wordpress posts. Fortunately, &lt;a href='http://wiki.github.com/mojombo/jekyll/blog-migrationsl'&gt;there is documentation for that too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, the automatic migration did not convert some of the markup very well, such as LaTex, images with captions, most lists and links. Yet I had less than 15 posts, so I just went through them and checked everything. Because I&amp;#8217;m using &lt;a href='http://www.latex-project.org/'&gt;LaTeX&lt;/a&gt; in some of my posts, I used &lt;a href='http://maruku.rubyforge.org/maruku.html'&gt;maruku&lt;/a&gt; (instead of &lt;a href='http://github.com/rtomayko/rdiscount'&gt;rdiscount&lt;/a&gt;) to parse them. I couldn&amp;#8217;t find LaTeX support for rdiscount, which is a faster parser.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m also using lsi for related posts, and &lt;a href='http://pygments.org/'&gt;python-pygments&lt;/a&gt; for syntax highlighting. The latter is simply a wonderful tool, and I recommend it to anyone posting code on the web. Of course, all of these are documented in the Jekyll documentation, so it was easy to get it all working.&lt;/p&gt;

&lt;p&gt;The code for this site is up on github as well, so you can &lt;a href='http://github.com/pcraciunoiu/embrangler/'&gt;check it out there&lt;/a&gt; to see how it works.&lt;/p&gt;

&lt;h3 id='migrating_comments'&gt;Migrating comments&lt;/h3&gt;

&lt;p&gt;This took me about 20 minutes :), following &lt;a href='http://disqus.com/comments/wordpress/'&gt;these instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='server_setup_and_more'&gt;Server setup and more&lt;/h3&gt;

&lt;p&gt;I actually didn&amp;#8217;t want to install jekyll on my server, and preferred to do all the generating locally. My server only works with plain html this way. The one thing I did do, however, was use github&amp;#8217;s post-receive-hook service. I ended up having something &lt;a href='http://forum.webfaction.com/viewtopic.php?id=964'&gt;similar to this&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github posts data to a php file on my server&lt;/li&gt;

&lt;li&gt;this file verifies the posted data, logs the commit, and runs a C script.&lt;/li&gt;

&lt;li&gt;the C script runs &lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;#8217;s the code for all of this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;php script&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href='http://coffeeonthekeyboard.com/'&gt;James&lt;/a&gt; pointed out that my security measures weren&amp;#8217;t good enough, so I updated the script. If you don&amp;#8217;t care much for security, you may prefer automated publishing. See my &lt;a href='#second-script'&gt;second script&lt;/a&gt;, below.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class='nv'&gt;$check&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;auth&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nv'&gt;$check&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;die&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;exec&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/path/to/site/pull_script&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;auth&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// do some parameter checking here&lt;/span&gt;
    &lt;span class='c1'&gt;// and return true when matches&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To make things even more awesome, I bookmarked this URL using &lt;a href='http://lifehacker.com/196779/hack-attack-firefox-and-the-art-of-keyword-bookmarking'&gt;Firefox&amp;#8217;s keywords&lt;/a&gt;, so I only need to type one character to publish ;)&lt;/p&gt;
&lt;span id='second-script' /&gt;
&lt;p&gt;Here is my second script, which does automatic publishing.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nv'&gt;$_POST&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nb'&gt;header&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;HTTP/1.0 403 Forbidden&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nb'&gt;define&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;HOOKLOG&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;../logs/hooks.log&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nv'&gt;$fh&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;fopen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;HOOKLOG&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;or&lt;/span&gt; &lt;span class='k'&gt;die&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Can&amp;#39;t open file&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nv'&gt;$data&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='nv'&gt;$hook&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;json_decode&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$_POST&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$hook&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;repository&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;owner&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;name&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pcraciunoiu&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nb'&gt;header&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;HTTP/1.0 403 Forbidden&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nv'&gt;$cs&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$hook&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;commits&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='k'&gt;foreach&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$cs&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='nv'&gt;$c&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nv'&gt;$data&lt;/span&gt; &lt;span class='o'&gt;.=&lt;/span&gt; &lt;span class='nv'&gt;$c&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;timestamp&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='nv'&gt;$data&lt;/span&gt; &lt;span class='o'&gt;.=&lt;/span&gt; &lt;span class='nv'&gt;$c&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;author&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;name&lt;/span&gt;
        &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39; (&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='nv'&gt;$c&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;author&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;email&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;)&amp;#39;&lt;/span&gt;
        &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39; pushed to &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='nv'&gt;$hook&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;repository&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;url&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
        &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;View commit at &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='nv'&gt;$c&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;url&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
        &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n\n&lt;/span&gt;&lt;span class='s2'&gt;Commit message was:&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='nv'&gt;$c&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;message&lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n\n&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nb'&gt;fwrite&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$fh&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$data&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nb'&gt;fclose&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$fh&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

&lt;span class='c1'&gt;// set this to your path&lt;/span&gt;
&lt;span class='nb'&gt;exec&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/path/to/site/pull_script&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There are two important security measures in the first script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it not write to a file, so if it gets hit by someone trying to find the secret codes, my server&amp;#8217;s disk doesn&amp;#8217;t perform intensive &lt;abbr title='input-output'&gt;IO&lt;/abbr&gt;&lt;/li&gt;

&lt;li&gt;it does not hint in any way at parameter names, number of parameters that must be submitted, or whether they should be submitted through GET or POST &amp;#8211; if you don&amp;#8217;t get the right values, you don&amp;#8217;t see anything&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;the c file&lt;/li&gt;
&lt;/ol&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='cp'&gt;#include &amp;lt;stddef.h&amp;gt;&lt;/span&gt;
&lt;span class='cp'&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class='cp'&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;main&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;execl&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/usr/bin/git&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;const&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nb'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Compile this with&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;gcc pull_script.c -o pull_script
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So now, every time I push to github, the server automatically updates. Really cool way of publishing!&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I enjoy using git, and having a static site. My comments are offloaded to a separate server, and I write plain text files using the markdown syntax. My blog gets published when I visit a bookmarked URL.&lt;/p&gt;

&lt;p&gt;Goodbye Wordpress!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Quoteden: Moving to Kohana 3</title>
   <link href="http://embrangler.com/2010/03/quoteden-moving-to-kohana-3"/>
   <updated>2010-03-12T00:00:00-08:00</updated>
   <id>http://embrangler.com/2010/03/quoteden-moving-to-kohana-3</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This post is written in collaboration with Marius Craciunoiu, my brother, and designer of Quote Den and &lt;a href='http://craciunoiu.net'&gt;other&lt;/a&gt; &lt;a href='http://awesomemath.org'&gt;sites&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hooray! 2 weeks after it started, &lt;a href='http://quoteden.net'&gt;Quote Den&lt;/a&gt;&amp;#8217;s migration from &lt;a href='http://drupal.org'&gt;Drupal&lt;/a&gt; 6 to &lt;a href='http://kohanaphp.com/'&gt;Kohana&lt;/a&gt; 3 is complete. This post offers a summary of that process, and lists some of the design improvements and implementation accomplishments. Along the way, it links to some of the resources used.&lt;/p&gt;

&lt;p&gt;Table of contents:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='#why_change'&gt;Why change?&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='#redesign_details'&gt;Redesign details&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='#implementation_process'&gt;Implementation process&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='#conclusion'&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='why_change'&gt;Why change?&lt;/h2&gt;

&lt;p&gt;First of all, why the change? The reason for the change is threefold.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Redesign opportunity&lt;/strong&gt; - First of all, &lt;em&gt;Quote Den&lt;/em&gt; needed a redesign. Almost every part of the site was going to be affected. This was a great opportunity to move on to a better platform.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Ease of development&lt;/strong&gt; - The &lt;a href='http://en.wikipedia.org/wiki/Presentation-abstraction-control'&gt;(H)MVC&lt;/a&gt; model is a pleasure to work with, and once you get it, it&amp;#8217;s clear where your code goes, when you want to do something. While Drupal uses a similar model (module is similar to controller, template is similar to view), it is not exactly a &lt;a href='http://buytaert.net/drupal-learning-curve'&gt;breeze&lt;/a&gt; to develop in, and having worked with &lt;a href='http://craciunoiu.net/'&gt;several&lt;/a&gt;, &lt;a href='http://quality.mozilla.org/'&gt;drupal&lt;/a&gt; &lt;a href='http://spreadfirefox.com/'&gt;sites&lt;/a&gt;, must say Kohana is much nicer.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt; - Using custom built models in a framework allows for more flexibility and ultimately control over the application. Basically, you can make it do what you want without having to hack it.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; - Kohana is a fairly simple framework. Compared to &lt;a href='http://framework.zend.com/'&gt;Zend&lt;/a&gt;, for example, it offers fewer features and is perfect for a simpler website such as &lt;a href='http://quoteden.net'&gt;Quote Den&lt;/a&gt;. We didn&amp;#8217;t need all of the features that Drupal offers either. Finally, Kohana works quite a bit faster than Drupal for Quote Den&amp;#8217;s purposes. As a comparison, the new site now loads in ~0.5s versus ~0.75s on my computer (over an average of 20 page loads). Here is a YSlow comparison of &lt;a href='/files/quoteden/quoteden-stage.html'&gt;new&lt;/a&gt; versus &lt;a href='/files/quoteden/quoteden.html'&gt;old&lt;/a&gt;. Content caching is not yet in place.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='redesign_details'&gt;Redesign details&lt;/h2&gt;

&lt;p&gt;In terms of design, the old site suffered quite a bit. Some of the pre-launch issues include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lacking a clear and consistent navigation&lt;/li&gt;

&lt;li&gt;inconsistent design across the website&lt;/li&gt;

&lt;li&gt;inconsistent spacing and centering of elements&lt;/li&gt;

&lt;li&gt;search pages were not very useful&lt;/li&gt;

&lt;li&gt;individual quote pages were almost empty (now they list related quotes)&lt;/li&gt;

&lt;li&gt;there was no link to the landing page (besides the logo)&lt;/li&gt;

&lt;li&gt;Drupal and the quotes module did not offer good administrative options&lt;/li&gt;

&lt;li&gt;the site had no contact link&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of this section summarizes some of the improvements in more detail.&lt;/p&gt;

&lt;h3 id='search_engine'&gt;Search engine&lt;/h3&gt;

&lt;p&gt;The older search was the default Drupal search, presumably using MySQL fulltext search. The new implementation uses Sphinx search, which does &lt;a href='http://en.wikipedia.org/wiki/Stemming'&gt;stemming&lt;/a&gt;, and searches for other inflections of the same word. For example, searching for &amp;#8220;hopeless&amp;#8221; includes results with &amp;#8220;hopelessness&amp;#8221;, or searching for &amp;#8220;loving&amp;#8221; includes results with &amp;#8220;love&amp;#8221;. The new search is also much faster, at least in part because it does not need to query the database. You can read more about Sphinx search &lt;a href='http://sphinxsearch.com/'&gt;here&lt;/a&gt;. It is worth noting that Drupal could also be &lt;a href='http://drupal.org/project/sphinx'&gt;configured with Sphinx&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='navigation'&gt;Navigation&lt;/h3&gt;

&lt;p&gt;When we first designed the website, we wanted it to be as simple as possible. This meant stripping it down of all features except the basics: a page to list quotes and a search function. Later on, this became a problem because we added other features, such as the &lt;em&gt;Top Rated&lt;/em&gt; page and categories for each quote. We wanted to add a &lt;a href='http://quoteden.net/quote/top'&gt;Top Rated&lt;/a&gt; link to the header, but there wasn&amp;#8217;t a good place for it. If it were placed next to the search bar, it seemed to be the label for the input box, but if it were placed too far away, it looked alienated.&lt;/p&gt;
&lt;div class='img-wrap'&gt;&lt;div class='img'&gt;
    &lt;img title='top-rated-link' src='/images/quoteden/top-rated-link.jpg' alt='Top Rated placement in previous design' /&gt;
    &lt;div&gt;Top Rated placement in previous design&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This issue was solved with the introduction of the &lt;em&gt;tabbed navigation&lt;/em&gt; menu. The &lt;em&gt;Top Rated&lt;/em&gt; tab is now located next to the &amp;#8220;Newest&amp;#8221; tab. The menu also solved another issue: the user can now see which page they are located on because the active tab changes color.&lt;/p&gt;
&lt;div class='img-wrap'&gt;&lt;div class='img'&gt;
    &lt;img title='navigation' src='/images/quoteden/navigation.jpg' alt='Top Rated placement in new design' /&gt;
    &lt;div&gt;Top Rated placement in new design&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3 id='categories'&gt;Categories&lt;/h3&gt;

&lt;p&gt;Another feature introduced after the initial launch of the website was the addition of categories. In the old design, they were placed at the top of the quote, which caused the quote itself to receive less attention. To fix this, the new design shows the categories under the quote and reduces the font size.&lt;/p&gt;
&lt;div class='img-wrap'&gt;&lt;div class='img'&gt;
    &lt;img title='categories-design' src='/images/quoteden/categories-design.jpg' alt='Categories -- before (right), after (left)' /&gt;
    &lt;div&gt;Categories -- before (right), after (left)&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When categories were first added, there wasn&amp;#8217;t a page to list them all. They offered the benefit of seeing quotes in the same category, and were also included in search. Now, we have a &lt;em&gt;Categories&lt;/em&gt; page.&lt;/p&gt;
&lt;div class='img-wrap'&gt;&lt;div class='img'&gt;
    &lt;img title='categories' src='/images/quoteden/categories.jpg' alt='The new categories page' /&gt;
    &lt;div&gt;The new categories page&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3 id='polishing_the_design'&gt;Polishing the design&lt;/h3&gt;

&lt;p&gt;One of the issues with the old Quote Den was an inconsistent design. For example, the heading &amp;#8220;Top Rated Quotes&amp;#8221; did not match the general style of the website. To solve this, we removed page headings altogether. The active page is now shown by the navigation menu.&lt;/p&gt;
&lt;div class='img-wrap'&gt;&lt;div class='img'&gt;
    &lt;img title='headings' src='/images/quoteden/headings.jpg' alt='Top Rated page is now consistent with new design (left)' /&gt;
    &lt;div&gt;Top Rated page is now consistent with new design (left)&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;search&lt;/em&gt; page looked completely different than the rest of the website. Users could click anywhere on the quote to go to the individual quote, although there was no distinction made to indicate this. The quote ID and rating were missing from the results, which diminishes their value across the website and possibly discourages users from rating. If no one would see the rating while searching, then what&amp;#8217;s the point of rating? The search page is now styled just like the other pages. In terms of usability, we made it easier for users to find what they&amp;#8217;re looking for. If users see a quote they like in the search results, they can vote on it right away.&lt;/p&gt;
&lt;div class='img-wrap'&gt;&lt;div class='img'&gt;
    &lt;img title='search' src='/images/quoteden/search.jpg' alt='Search uses highlighting and is also consistent' /&gt;
    &lt;div&gt;Search uses highlighting and is also consistent&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Part of perfecting the design was to &lt;a href='http://webdesign.about.com/od/webdesignbasics/p/aabalance.htm'&gt;balance&lt;/a&gt; all the elements on the page. The first and foremost stage in this process was to make sure all the elements are equally apart from their surrounding elements. For example, the ID and Rating were closer to the bottom of the quote than the top. Second, the stars were too small to balance the visual weight of the ID. To solve these problems, we enlarged the stars and centered them with the quote area.&lt;/p&gt;
&lt;div class='img-wrap'&gt;&lt;div class='img'&gt;
    &lt;img title='rating-compare' src='/images/quoteden/rating-compare.jpg' alt='Balance in whitespace and larger stars (on the left)' /&gt;
    &lt;div&gt;Balance in whitespace and larger stars (on the left)&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3 id='administrative_options'&gt;Administrative Options&lt;/h3&gt;
&lt;div class='img-wrap'&gt;&lt;div class='img'&gt;
    &lt;img title='rating-compare' src='/images/quoteden/add-quotes.jpg' alt='Admin: quote creation form (left is new)' /&gt;
    &lt;div&gt;Admin: quote creation form (left is new)&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Although probably none of you may see this anytime soon, one of the reasons we redesigned Quote Den was because it was a pain to add quotes. The add form was incredibly complex. To give you an idea of how BIG this thing was, you should know it had:&lt;/p&gt;
&lt;div class='table-wrap'&gt;&lt;div class='table'&gt;
&lt;table cellspacing='0' border='0'&gt;
&lt;tr&gt;
&lt;th style='width: 30%'&gt;Before&lt;/th&gt;
&lt;th style='width: 40%'&gt;and&lt;/th&gt;
&lt;th&gt;After&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;9 input fields&lt;/li&gt;
&lt;li&gt;2 drop down menus&lt;/li&gt;
&lt;li&gt;6 radio buttons&lt;/li&gt;
&lt;li&gt;5 check boxes&lt;/li&gt;
&lt;li&gt;48 lines of text&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td class='center'&gt;vs&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;3 input fields&lt;/li&gt;
&lt;li&gt;4 lines of text&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class='caption'&gt;Quote creation form, improvements&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3 id='feedback'&gt;Feedback&lt;/h3&gt;

&lt;p&gt;Of course no website would be complete without the almighty contact us link, so we added one on the bottom. We hope our viewers will contact us about anything related to the website, whether that is feedback on the site or suggestions on the quotes themselves.&lt;/p&gt;

&lt;h2 id='implementation_process'&gt;Implementation process&lt;/h2&gt;

&lt;p&gt;We actually started with Kohana 2, unsure about how easy it will be to migrate. A major concern was how quickly we could get Quote Den up and running on the new platform. Following &lt;a href='http://http//stackoverflow.com/questions/394175/searching-for-a-kohana-beginners-tutorial-for-php'&gt;tutorials&lt;/a&gt; (mostly, a &lt;a href='http://http//learn.kohanaphp.com/2008/03/26/blog-tutorial-1/'&gt;blog tutorial&lt;/a&gt;), getting a simple quote+author page going was quick and painless, so we decided to go ahead and use Kohana.&lt;/p&gt;

&lt;p&gt;As soon as the quote and author models were finalized and tested to work, a quick attempt at a migration was necessary. This turned out to be quick and easy.&lt;/p&gt;

&lt;p&gt;Next, we had templates. Using Kohana&amp;#8217;s &lt;a href='http://kerkness.ca/wiki/doku.php?id=template-site:extending_the_template_controller'&gt;Controller_Template&lt;/a&gt;, set up Controller_Quote. Then wrote a quotes template (under &lt;code&gt;views/quotes/quotes.php&lt;/code&gt;, extending &lt;code&gt;views/base/template.php&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Afterwards, we added &lt;a href='http://code.google.com/p/minify/'&gt;minify&lt;/a&gt;, categories, author pages. Since quotes use categories everywhere they are displayed, a good option was to overwrote the quote model constructor to always grab the related categories, sorted.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Model_Quote&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nx'&gt;ORM&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='c1'&gt;// ...&lt;/span&gt;
  &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$id&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;parent&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='na'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$id&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;_object&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;categories_list&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;categories&lt;/span&gt;
         &lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;order_by&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;asc&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
         &lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;find_all&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then pagination. There is a simple pagination module documented on the &lt;a href='http://kerkness.ca/wiki/doku.php?id=how_to_use_the_pagination_module'&gt;unofficial wiki&lt;/a&gt; which works beautifully.&lt;/p&gt;

&lt;p&gt;On to search. We decided on using Sphinx, since Paul is already familiar with it from &lt;a href='http://support.mozilla.com/'&gt;SUMO&lt;/a&gt; and knew how to set it up. Sphinx has many advantages - it scales, it&amp;#8217;s fast, it&amp;#8217;s powerful and customizable. There is a bit of a learning curve to it, but you can mostly learn by examples. Paul started with &lt;a href='http://viewvc.svn.mozilla.org/vc/projects/sumo/trunk/scripts/sphinx/sphinx.conf'&gt;SUMO&amp;#8217;s sphinx.conf&lt;/a&gt; and drastically simplified it, then modified it to match my database structure. Finally, set up a crontab on my VPS to reindex and rotate every 24 hours.&lt;/p&gt;

&lt;p&gt;The final crucial aspect was having a way to add and edit content. This required user authentication &amp;#8211; which, fortunately, comes with Kohana 3 and works well. We just use the default auth module and we haven&amp;#8217;t had any problems. Here&amp;#8217;s a code sample:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='c1'&gt;// application/classes/controller/user.php&lt;/span&gt;
  &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;action_login&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// ...&lt;/span&gt;
    &lt;span class='c1'&gt;// if posted data&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$_POST&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nv'&gt;$user&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;ORM&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='na'&gt;factory&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

    &lt;span class='c1'&gt;// check auth&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$user&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;login&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$_POST&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='c1'&gt;// redirect to my account&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nv'&gt;$view&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;errors&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$_POST&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;errors&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;template&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;title&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Error logging in&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After this, all that was left was the rating system. After some searching for good ways to do it using only CSS, we found a great one &lt;a href='http://www.komodomedia.com/blog/2007/01/css-rating-redux/' title='how to write a css rating system'&gt;here&lt;/a&gt;, and then went on to write a model/controller for it. Rating only works through javascript at the moment, but that will change once we implement a mobile-friendly version.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://kerkness.ca/wiki/doku.php?id=working_with_atom_and_rss_feeds'&gt;Setting up an RSS feed&lt;/a&gt; took Paul literally 20 minutes, and then the final page left to write was the &lt;a href='http://quoteden.net/quote/top'&gt;Top Rated&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;To top it off, we have also put in place a bunch of .htaccess RewriteRules for handling redirects from old Drupal URLs.&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So that&amp;#8217;s it. The Quote Den Drupal-&amp;gt;Kohana work summarized. The benefits: performance improvements of more than 50% (in page load time), more flexibility, consistency in the design, and Sphinx search.&lt;/p&gt;

&lt;p&gt;And if you&amp;#8217;re learning Kohana, and would like some help, shoot us a comment below.&lt;/p&gt;</content>
 </entry>
 

</feed>
