<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Disembrangling Programming</title>
 <link href="http://embrangler.com/tag/beginner/atom.xml" rel="self"/>
 <link href="http://embrangler.com/tag/beginner"/>
 <updated>2011-01-31T21:01:26-08:00</updated>
 <id>http://embrangler.com/</id>
 <author>
   <name>Paul Craciunoiu</name>
   <email>paul@craciunoiu.net</email>
 </author>

 
 <entry>
   <title>Python scoping: understading LEGB</title>
   <link href="http://embrangler.com/2011/01/python-scoping-understading-legb"/>
   <updated>2011-01-31T00:00:00-08:00</updated>
   <id>http://embrangler.com/2011/01/python-scoping-understading-legb</id>
   <content type="html">&lt;h2 id='summary'&gt;Summary&lt;/h2&gt;

&lt;p&gt;Python scoping fun! &lt;a href='http://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules'&gt;Read about LEGB&lt;/a&gt; to understand the basics of python scoping.&lt;/p&gt;

&lt;h2 id='beef'&gt;Beef&lt;/h2&gt;

&lt;p&gt;I never bothered to read about how python scoping works until I hit this. It&amp;#8217;s not exactly something to research until you have issues with it. :)&lt;/p&gt;

&lt;p&gt;I had something like this going on:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;func1&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;param&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;func2&lt;/span&gt;&lt;span class='p'&gt;():&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;param&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;             &lt;span class='n'&gt;param&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;default&amp;#39;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='n'&gt;param&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='c'&gt;# Just return func2.&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;func2&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt; 
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;__name__&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='n'&gt;func1&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Actual code was not as straightforward, &lt;code&gt;func2&lt;/code&gt; was actually a decorator. Admittedly, using the same parameter name is not a must, but it&amp;#8217;s still a curiosity. I just wanted to fall back to a default value on run-time.&lt;/p&gt;

&lt;p&gt;If you try to run this in python, here&amp;#8217;s what you get:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='o'&gt;~&lt;/span&gt; &lt;span class='err'&gt;$&lt;/span&gt; &lt;span class='n'&gt;python&lt;/span&gt; &lt;span class='n'&gt;test&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;py&lt;/span&gt; 
&lt;span class='n'&gt;Traceback&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;most&lt;/span&gt; &lt;span class='n'&gt;recent&lt;/span&gt; &lt;span class='n'&gt;call&lt;/span&gt; &lt;span class='n'&gt;last&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
  &lt;span class='n'&gt;File&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;line&lt;/span&gt; &lt;span class='mi'&gt;11&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;module&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='n'&gt;func1&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)()&lt;/span&gt;
  &lt;span class='n'&gt;File&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;line&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;func2&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;param&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
&lt;span class='ne'&gt;UnboundLocalError&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;local&lt;/span&gt; &lt;span class='n'&gt;variable&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;param&amp;#39;&lt;/span&gt; &lt;span class='n'&gt;referenced&lt;/span&gt; &lt;span class='n'&gt;before&lt;/span&gt; &lt;span class='n'&gt;assignment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you&amp;#8217;re curious, you can &lt;a href='http://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules'&gt;read about the principles of LEGB.&lt;/a&gt; You have to understand a bit about compilers and &lt;a href='http://en.wikipedia.org/wiki/Abstract_syntax_tree'&gt;the AST&lt;/a&gt; to get what&amp;#8217;s going on behind the scenes. You might thing that replacing lines 3-4 with:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;param&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;param&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;default&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Might work. But no. You can&amp;#8217;t assign the same parameter at the local level if the enclosing level defines it. Even this fails:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;param&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;param&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Fun, no?&lt;/p&gt;

&lt;h2 id='read_more'&gt;Read more&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules'&gt;LEGB (stackoverflow)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://docs.python.org/tutorial/classes.html#python-scopes-and-namespaces'&gt;Python docs on scope and namespaces.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 

</feed>
